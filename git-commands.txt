#configure Git
git config --global user.name "your-username"
git config --global user.email "your-email"

#put the files on local repository or create new files
#initialize the Git repository
git init

#add the file in stage area
git add index.html

#example to add files in stage area
#git add index.html abc.txt folder-a/file1.txt folder-b/file2.txt

#check the staged files

git status

#commit the files
git commit -m "initial commit"

#now update the few lines and again add and commit

git add index.html
git commit -m "added few lines"

#check the commit history

git log

#switch to privious commit 

git checkout commit-id 

#example
git checkout b38d5d01e2aaf77c23cb8b28039fc3e1ee585190

#switch to latest commit

git checkout main
git log

#undo the commit

git revert commit id

#get the commit id using

git log

#git reset - it will delete all commit id and message.

git reset --hard commit-id #go to that commit with reset all new commit

#suppose you have made three commit and you want to go to first commit and delete all commit history of second and third commit


#add remote repository 
git remote add GIT_URL


#########################Key command ##############

git init                 - initialize a Git repository
git add <file(s)>        - Stage code changes
git commit -m "..."      - Create a commit for the stage changes
git status               - Get the current repository status
git log                  - Output a chronologically order list of commits
git checkout id          - Temporarily move back to commit <id>
git revert <id>          - Revert the changes of commit <id>
git reset <id>           - Undo commit(s) by deleting commits

#add mutiple files in stage area

git add .

git commit -m "added all files"

##create a .gitignore file and add file or folder which you want to ignore during git add command
##those file will not track by git

##Git branch

#list out the all branch

git branch

#create new branch

git branch feature-restructure

#switch to branch
git checkout feature-restructure

git branch

git log

#switch to main branch

git checkout main

#delete the branch

git branch -D feature-restructure

#create a branch and checkout

git checkout -b feature-restructure

##Git branch merge

#add files or modify in new branch and make a commit
#suppose currently I am working on feature-restructure branch

git add .

git commit -m "updated links"

git log

#switch to main branch

git checkout main

git merge feature-restructure

git log

#Delete the feature branch after merge if not required

git branch -D feature-restructure

##Set remote repo in local repo
# create a access token on Github account which need during sign in.
# go to profile setting and developer setting and generate access token

git remote set-url origin https://github-username@repo-url

#example
git remote set-url origin https://anishraut7836@github.com/anishraut7836/github-action-course.git

git push origin main

#create new branch and push the code into github

git checkout -b feat-sect

#modify files and commit

git add .

git commit -m "added section"

#push the code

git push origin feat-section
#switch to main branch and merge the code local and push to remote repo

git checkout main

git merge feat-section

git push

#delete the repo on local
git branch -D feat-section

# Pull the code from remote repo to local repo

git Pull

# Git clone

git clone remote-repo-url

git clone https://github.com/anishraut7836/github-action-course.git

#if I define the local directory name then it will clone to that repo

git clone https://github.com/anishraut7836/github-action-course.git  demo-repo

# get the remote  repo link
git remote
git remote get-url origin


## Add remote repo with username if already started working as git in local but later you push the code

git init
git add .
git commit -m "initialize the project"
git remote add origin https://github_username@github_repo-url
git push --set-upstream origin main
git push
